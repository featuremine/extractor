extractor_src = files(
    'book_build.cpp',
	'call_obj.cpp',
	'call_stack.cpp',
	'comp.cpp',
	'comp_def.cpp',
	'comp_def_simp.cpp',
	'comp_graph.cpp',
	'comp_sys.cpp',
	'csv_play.cpp',
    'csv_record.cpp',
    'csv_tail.cpp',
    'cumulative.cpp',
	'unique.cpp',
	'exec_ctx.cpp',
	'frame.cpp',
	'stream_ctx.cpp',
	'type_decl.cpp',
	'type_error.cpp',
	'type_space.cpp',
	'type_sys.cpp',
    'split.cpp',
    'identity.cpp',
    'mp_play.cpp',
    'mp_record.cpp',
    'book/book.cpp',
    'bbo_book_aggr.cpp',
    'bbo_aggr.cpp',
    'book_play_split.cpp',
    'ore_live_split.cpp',
    'ore_sim_split.cpp',
    'book_msg.cpp',
    'book_trades.cpp',
    'book_header.cpp',
    'std_comp.cpp',
    'tick_lag.cpp',
    'time_lag.cpp',
    'field.cpp',
    'combine.cpp',
    'diff.cpp',
    'divide.cpp',
    'convert.cpp',
    'join.cpp',
    'trigger.cpp',
    'mm_file.cpp',
    'arg_stack.cpp',
    'arg_serial.cpp',
    'frame_serial.cpp',
    'comp_sys_capture.cpp',
    'comp_sys_serialize.cpp',
    'comp_sys_module.cpp',
    'equal.cpp',
    'not_equal.cpp',
    'greater.cpp',
    'greater_equal.cpp',
    'less.cpp',
    'less_equal.cpp',
    'filter_unless.cpp',
    'filter_if.cpp',
    'logical_and.cpp',
    'logical_or.cpp',
    'logical_not.cpp',
    'find_substr.cpp',
    'substr.cpp',
    'constant.cpp',
    'cond.cpp',
    'add.cpp',
    'sum.cpp',
    'mult.cpp',
    'ln.cpp',
    'log.cpp',
    'exp.cpp',
    'pow.cpp',
    'max.cpp',
    'min.cpp',
    'count.cpp',
    'nano.cpp',
    'module.cpp',
    'accumulate.cpp',
    'fields.cpp',
    'nan.cpp',
    'zero.cpp',
    'is_zero.cpp',
    'is_nan.cpp',
    'is_inf.cpp',
    'rational64.cpp',
    'perf_timer.cpp',
    'split_by.cpp',
    'frame_ytp_encode.cpp',
    'frame_ytp_decode.cpp',
    'ore_ytp_decode.cpp',
    'decode_data.cpp',
    'decode_receive.cpp',
    'timeout.cpp',
    'delayed.cpp',
    'heartbeat.cpp',
    'ytp_sequence.cpp',
    'round.cpp'
)

if is_linux
    extr_dep_deps = [dl, py3_dep, shared_ytp_dep, fmc_dep]
elif is_macos
    extr_dep_deps = [py3_dep, shared_ytp_dep, fmc_dep]
elif is_windows
    extr_dep_deps = [py3_dep, shared_ytp_dep, fmc_dep]
endif

if fmtron
    extractor_src += files('fmtron_sys.cpp')
    extr_dep_deps += fmtron_dep
endif

extractor_tests = [
    ['time64_serial', []],
    ['arg_stack', files('arg_stack.cpp')],
    ['arg_serial', files(
        'arg_stack.cpp',
        'arg_serial.cpp',
        'type_sys.cpp',
        'type_space.cpp',
        'type_error.cpp',
        'type_decl.cpp',
        'rational64.cpp')],
    ['call_stack', files('call_stack.cpp')],
    ['comp_graph', files('comp_graph.cpp')],
    ['exec_ctx', files(
        'call_obj.cpp',
        'comp_graph.cpp',
        'call_stack.cpp',
        'stream_ctx.cpp',
        'exec_ctx.cpp')],
    ['comp_sys', files(
        'arg_stack.cpp',
        'arg_serial.cpp',
        'comp.cpp',
        'call_obj.cpp',
        'comp_graph.cpp',
        'call_stack.cpp',
        'stream_ctx.cpp',
        'comp_sys.cpp',
        'comp_def_simp.cpp',
        'comp_def.cpp',
        'type_sys.cpp',
        'type_space.cpp',
        'type_error.cpp',
        'type_decl.cpp',
        'exec_ctx.cpp',
        'rational64.cpp')],
    ['type_sys', files(
        'type_sys.cpp',
        'type_space.cpp',
        'type_error.cpp',
        'type_decl.cpp',
        'rational64.cpp')],
    ['tests', extractor_src + py_extractor_src]
]

install_data('book_play_split.cpp', install_dir : 'src')
install_data('book_play_split.h', install_dir : 'src')
