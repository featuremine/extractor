add_library(
    extractor_book_lib_obj
    OBJECT
    "book/book.cpp"
    "book/updates.cpp"
)
target_link_libraries(
    extractor_book_lib_obj
    PUBLIC
    ytp
    fmc++
)
target_include_directories(
    extractor_book_lib_obj
    PUBLIC
    "${EXTRACTOR_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
    PRIVATE
    "${EXTRACTOR_SRC_DIR}"
)

add_library(
    extractor_book_lib_dep
    INTERFACE
)
target_link_libraries(
    extractor_book_lib_dep
    INTERFACE
    ytp
    fmc++
)
target_include_directories(
    extractor_book_lib_dep
    INTERFACE
    "${EXTRACTOR_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
)

add_library(
    extractor_book_lib
    STATIC
    $<TARGET_OBJECTS:extractor_book_lib_obj>
)
target_link_libraries(
    extractor_book_lib
    PUBLIC
    extractor_book_lib_dep
)

add_library(
    extractor_obj
    OBJECT
    "api.cpp"
    "book_build.cpp"
    "call_obj.cpp"
    "call_stack.cpp"
    "comp.cpp"
    "comp_def.cpp"
    "comp_def_simp.cpp"
    "comp_graph.cpp"
    "comp_sys.cpp"
    "csv_play.cpp"
    "csv_record.cpp"
    "csv_tail.cpp"
    "cumulative.cpp"
    "unique.cpp"
    "exec_ctx.cpp"
    "frame.cpp"
    "stream_ctx.cpp"
    "type_decl.cpp"
    "type_error.cpp"
    "type_space.cpp"
    "type_sys.cpp"
    "split.cpp"
    "identity.cpp"
    "mp_play.cpp"
    "mp_record.cpp"
    "bbo_book_aggr.cpp"
    "bbo_aggr.cpp"
    "book_play_split.cpp"
    "ore_live_split.cpp"
    "seq_ore_live_split.cpp"
    "ore_sim_split.cpp"
    "book_msg.cpp"
    "book_trades.cpp"
    "book_header.cpp"
    "book_vendor_time.cpp"
    "std_comp.cpp"
    "tick_lag.cpp"
    "time_lag.cpp"
    "field.cpp"
    "combine.cpp"
    "diff.cpp"
    "divide.cpp"
    "remainder.cpp"
    "convert.cpp"
    "join.cpp"
    "last.cpp"
    "trigger.cpp"
    "mm_file.cpp"
    "arg_stack.cpp"
    "arg_serial.cpp"
    "frame_serial.cpp"
    "comp_sys_capture.cpp"
    "comp_sys_serialize.cpp"
    "comp_sys_module.cpp"
    "equal.cpp"
    "not_equal.cpp"
    "greater.cpp"
    "greater_equal.cpp"
    "less.cpp"
    "less_equal.cpp"
    "filter_unless.cpp"
    "filter_if.cpp"
    "skip_unless.cpp"
    "logical_and.cpp"
    "logical_or.cpp"
    "logical_not.cpp"
    "find_substr.cpp"
    "substr.cpp"
    "constant.cpp"
    "cond.cpp"
    "add.cpp"
    "sum.cpp"
    "mult.cpp"
    "ln.cpp"
    "log.cpp"
    "exp.cpp"
    "pow.cpp"
    "max.cpp"
    "min.cpp"
    "count.cpp"
    "nano.cpp"
    "module.cpp"
    "accumulate.cpp"
    "fields.cpp"
    "nan.cpp"
    "zero.cpp"
    "is_zero.cpp"
    "is_nan.cpp"
    "is_inf.cpp"
    "perf_timer.cpp"
    "split_by.cpp"
    "frame_ytp_encode.cpp"
    "frame_ytp_decode.cpp"
    "ore_ytp_decode.cpp"
    "decode_data.cpp"
    "decode_receive.cpp"
    "timeout.cpp"
    "delayed.cpp"
    "heartbeat.cpp"
    "ytp_sequence.cpp"
    "round.cpp"
)
target_link_libraries(
    extractor_obj
    PUBLIC
    fmc++
    ytp
    extractor_book_lib_dep
)
target_include_directories(
    extractor_obj
    PUBLIC
    "${EXTRACTOR_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
    "${EXTRACTOR_SRC_DIR}"
)

add_library(
    extractor_dep
    INTERFACE
)
target_link_libraries(
    extractor_dep
    INTERFACE
    fmc++
    ytp
    extractor_book_lib_dep
)
target_include_directories(
    extractor_dep
    INTERFACE
    "${EXTRACTOR_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
)

add_library(
    extractor
    SHARED
    $<TARGET_OBJECTS:extractor_obj>
    $<TARGET_OBJECTS:extractor_book_lib_obj>
)
target_link_libraries(
    extractor
    PRIVATE
    extractor_dep
    extractor_book_lib_dep
)
set_target_properties(
    extractor
    PROPERTIES
    OUTPUT_NAME "extractor"
    LIBRARY_OUTPUT_DIRECTORY "${WHEEL_extractor_BUILD_DIR}/dist/extractor"
)
install(
    TARGETS
    extractor
)

add_library(
    ema_ext
    SHARED
    "../test/ema_ext.c"
)
target_include_directories(
    ema_ext
    PUBLIC
    "${EXTRACTOR_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
)
target_link_libraries(
    ema_ext
    PUBLIC
    extractor
    ytp
)
set_target_properties(
    ema_ext
    PROPERTIES
    OUTPUT_NAME "ema"
    VERSION "1.0.0"
    SOVERSION "0"
)

add_library(
    book_play_ext
    SHARED
    "../test/book_play_ext.c"
    "book_play_split.cpp"
)
target_include_directories(
    book_play_ext
    PUBLIC
    "${EXTRACTOR_INC_DIR}"
    "${EXTRACTOR_API_INC_DIR}"
    "${EXTRACTOR_SRC_DIR}"
)
target_link_libraries(
    book_play_ext
    PUBLIC
    extractor
    ytp
)
set_target_properties(
    book_play_ext
    PROPERTIES
    OUTPUT_NAME "book_play"
    VERSION "1.0.0"
    SOVERSION "0"
    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/test"
)
